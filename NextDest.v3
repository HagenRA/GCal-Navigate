from __future__ import print_function
import datetime, pickle, os.path, googlemaps, webbrowser, geocoder
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request

SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']
epoch = datetime.datetime(1970, 1, 1)


def main():
    creds = None
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    service = build('calendar', 'v3', credentials=creds)

    now = datetime.datetime.utcnow().isoformat() + 'Z'  # 'Z' indicates UTC time
    events_result = service.events().list(calendarId='primary', timeMin=now,
                                          maxResults=1, singleEvents=True,
                                          orderBy='startTime').execute()
    events = events_result.get('items', [])
    if not events:
        print('No upcoming events found.')
    for event in events:
        start = event['start'].get('dateTime', event['start'].get('date'))
        year = int(start[0:4])
        month = int(start[5:7])
        day = int(start[8:10])
        hour = int(start[11:13])
        minute = int(start[14:16])
        correction = (int(start[20:22])*3600)+(int(start[23:])*60)
        try:
            print(f'Next event is {event["summary"]} at {event["location"]}')
            print(f'The event is starting at {hour}:{start[14:16]} on {day}/{month}/{year}')
            start_time = str(int(((datetime.datetime(year, month, day, hour, minute) - epoch).total_seconds())
                                 - correction))
            myloc = geocoder.ip('me')
            current_loc = str(myloc.lat) + ',' + str(myloc.lng)
            webbrowser.open(
                'https://maps.googleapis.com/maps/api/directions/json?origin=' + current_loc + '&destination='
                + event['location'] + '&key=***YOUR_KEY_HERE***&mode=transit&arrival_time='
                + start_time)
                # 'https://www.google.com/maps/dir/?api=1&origin=' + current_loc +
                # '&destination=' + event['location'] + '&arrival_time=' + start_time + '&travelmode=transit')
        except KeyError:
            # Will work on setting it up so that instead of coming back with this unhelpful statement, will call on the
            # next event that has a location and navigate to there
            print(f'Next event is {event["summary"]}, however no location is defined.')
            print(f'The event is starting at {hour}:{start[14:16]} on {day}/{month}/{year}')


if __name__ == '__main__':
    main()
