# New approach, turning the events that are called into a data frame that can be cut down to only what is relevant for the navigation.
# Once confirmed how to finish the filtering out of both events without locations and also full day events,
# will combine into other script.
# While this removes all events without locations, I still haven't had time to have the script look into the DF to filter out the
# key values of only "date" (which is a variable unique to full day events)

from __future__ import print_function
import datetime, pickle, os.path
import pandas as pd
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request

SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']

def main():
    creds = None
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    service = build('calendar', 'v3', credentials=creds)

    now = datetime.datetime.utcnow().isoformat() + 'Z'
    print('Getting the upcoming 10 events')
    events_result = service.events().list(calendarId='primary', timeMin=now,
                                        maxResults=10, singleEvents=True,
                                        orderBy='startTime').execute()
    allevents = events_result.get('items', [])
    # Convert to data frame for filtering
    f_events = pd.DataFrame(allevents)
    # Filter events without location
    f_events = f_events[f_events.location.notnull()]
    events = f_events[['summary', 'start', 'location']]
    print(events)


    # if not events:
    #     print('No upcoming events found.')
    # for event in events:
    #     start = event['start'].get('dateTime', event['start'].get('date'))
    #     try:
    #         print(start + ' | ' + event['summary'] + ' | ' + event['location'])
    #     except KeyError:
    #         print(start + ' | ' + event['summary'])



if __name__ == '__main__':
    main()


